#ifndef _TEMPLATES_HPP
#define _TEMPLATES_HPP

namespace CodeNect::Templates
{
inline static const char* d_arr_bool = "//start of dynamic array for bool\n"
	"typedef struct\n"
	"{\n"
	"\tbool* array;\n"
	"\tint used;\n"
	"\tint size;\n"
	"} DynamicArrayBool;\n"
	"void init_d_arr_bool(DynamicArrayBool* array, int size)\n"
	"{\n"
	"\tarray->array = malloc(size * sizeof(bool));\n"
	"\tarray->used = 0;\n"
	"\tarray->size = size;\n"
	"}\n"
	"void insert_bool(DynamicArrayBool* array, bool value)\n"
	"{\n"
	"\tif (array->used == array->size)\n"
	"\t\tarray->size *= 2;\n"
	"\t\tarray->array = realloc(array->array, array->size * sizeof(bool));\n"
	"\t}\n"
	"\tarray->array[array->used++] = value;\n"
	"}\n"
	"void free_bool(DynamicArrayBool* array)\n"
	"{\n"
	"\tfree(array->array);\n"
	"\tarray->array = NULL;\n"
	"\tarray->used = array->size = 0;\n"
	"}\n"
	"//end of dynamic array for bool\n";

inline static const char* d_arr_int = "//start of dynamic array for int\n"
	"typedef struct\n"
	"{\n"
	"\tint* array;\n"
	"\tint used;\n"
	"\tint size;\n"
	"} DynamicArrayInt;\n"
	"void init_d_arr_int(DynamicArrayInt* array, int size)\n"
	"{\n"
	"\tarray->array = malloc(size * sizeof(int));\n"
	"\tarray->used = 0;\n"
	"\tarray->size = size;\n"
	"}\n"
	"void insert_int(DynamicArrayInt* array, int value)\n"
	"{\n"
	"\tif (array->used == array->size)\n"
	"\t\tarray->size *= 2;\n"
	"\t\tarray->array = realloc(array->array, array->size * sizeof(int));\n"
	"\t}\n"
	"\tarray->array[array->used++] = value;\n"
	"}\n"
	"void free_int(DynamicArrayInt* array)\n"
	"{\n"
	"\tfree(array->array);\n"
	"\tarray->array = NULL;\n"
	"\tarray->used = array->size = 0;\n"
	"}\n"
	"//end of dynamic array for int\n";

inline static const char* d_arr_float = "//start of dynamic array for float\n"
	"typedef struct\n"
	"{\n"
	"\tfloat* array;\n"
	"\tint used;\n"
	"\tint size;\n"
	"} DynamicArrayFloat;\n"
	"void init_d_arr_float(DynamicArrayFloat* array, int size)\n"
	"{\n"
	"\tarray->array = malloc(size * sizeof(float));\n"
	"\tarray->used = 0;\n"
	"\tarray->size = size;\n"
	"}\n"
	"void insert_float(DynamicArrayFloat* array, float value)\n"
	"{\n"
	"\tif (array->used == array->size)\n"
	"\t\tarray->size *= 2;\n"
	"\t\tarray->array = realloc(array->array, array->size * sizeof(float));\n"
	"\t}\n"
	"\tarray->array[array->used++] = value;\n"
	"}\n"
	"void free_float(DynamicArrayFloat* array)\n"
	"{\n"
	"\tfree(array->array);\n"
	"\tarray->array = NULL;\n"
	"\tarray->used = array->size = 0;\n"
	"}\n"
	"//end of dynamic array for float\n";

inline static const char* d_arr_double = "//start of dynamic array for double\n"
	"typedef struct\n"
	"{\n"
	"\tdouble* array;\n"
	"\tint used;\n"
	"\tint size;\n"
	"} DynamicArrayDouble;\n"
	"void init_d_arr_double(DynamicArrayDouble* array, int size)\n"
	"{\n"
	"\tarray->array = malloc(size * sizeof(double));\n"
	"\tarray->used = 0;\n"
	"\tarray->size = size;\n"
	"}\n"
	"void insert_double(DynamicArrayDouble* array, double value)\n"
	"{\n"
	"\tif (array->used == array->size)\n"
	"\t\tarray->size *= 2;\n"
	"\t\tarray->array = realloc(array->array, array->size * sizeof(double));\n"
	"\t}\n"
	"\tarray->array[array->used++] = value;\n"
	"}\n"
	"void free_double(DynamicArrayDouble* array)\n"
	"{\n"
	"\tfree(array->array);\n"
	"\tarray->array = NULL;\n"
	"\tarray->used = array->size = 0;\n"
	"}\n"
	"//end of dynamic array for double\n";

inline static const char* d_arr_str = "//start of dynamic array for string\n"
	"typedef struct\n"
	"{\n"
	"\tconst char* array;\n"
	"\tint used;\n"
	"\tint size;\n"
	"} DynamicArrayString;\n"
	"void init_d_arr_string(DynamicArrayString* array, int size)\n"
	"{\n"
	"\tarray->array = malloc(size * sizeof(const char*));\n"
	"\tarray->used = 0;\n"
	"\tarray->size = size;\n"
	"}\n"
	"void insert_string(DynamicArrayString* array, const char* value)\n"
	"{\n"
	"\tif (array->used == array->size)\n"
	"\t\tarray->size *= 2;\n"
	"\t\tarray->array = realloc(array->array, array->size * sizeof(const char*));\n"
	"\t}\n"
	"\tarray->array[array->used++] = value;\n"
	"}\n"
	"void free_string(DynamicArrayString* array)\n"
	"{\n"
	"\tfree(array->array);\n"
	"\tarray->array = NULL;\n"
	"\tarray->used = array->size = 0;\n"
	"}\n"
	"//end of dynamic array for string\n";
}

#endif //_TEMPLATES_HPP
